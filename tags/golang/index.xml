<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scott Barr</title>
    <link>/tags/golang/index.xml</link>
    <description>Recent content on Scott Barr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>sqsmv</title>
      <link>/2016/09/13/sqsmv/</link>
      <pubDate>Tue, 13 Sep 2016 23:50:00 +1000</pubDate>
      
      <guid>/2016/09/13/sqsmv/</guid>
      <description>&lt;p&gt;Recently we ran into a situation at work where we needed to move all
messages from one of our dead letter queues, back onto the &amp;ldquo;live&amp;rdquo;
queue for the service.&lt;/p&gt;

&lt;p&gt;AWS doesn&amp;rsquo;t expose a way to move messages out of the box, so I wrote a
small utility, which I creatively
named &lt;a href=&#34;https://github.com/scottjbarr/sqsmv&#34;&gt;sqsmv&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wrote the project in &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; because it is a great
fit for system programs, and I&amp;rsquo;ve worked with
the &lt;a href=&#34;https://github.com/aws/aws-sdk-go&#34;&gt;Go AWS SDK&lt;/a&gt; before.&lt;/p&gt;

&lt;p&gt;I created a bunch of messages and tested it&amp;hellip; First try! This is
something I find happens more often when I&amp;rsquo;m building with Go,
compared to doing the same task with a dynamic language.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/scottjbarr/sqsmv&#34;&gt;sqsmv&lt;/a&gt; has worked well,
successfully moving hundreds of messages successfully between
queues. I hope someone out there finds it useful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Processing Sidekiq jobs with Go Workers</title>
      <link>/2016/08/30/go-workers-sidekiq/</link>
      <pubDate>Tue, 30 Aug 2016 20:05:00 +1000</pubDate>
      
      <guid>/2016/08/30/go-workers-sidekiq/</guid>
      <description>

&lt;p&gt;I have a personal project where a
&lt;a href=&#34;https://github.com/mperham/sidekiq&#34;&gt;Sidekiq&lt;/a&gt; worker (written in Ruby)
was using between 150-200MB of RAM with 20 workers. These workers take
images that have been uploaded to a Rails application, and upload them
to an Amazon S3 bucket in the background. Most of the time these
workers are idle. This project generates exactly $0.00 income, and I&amp;rsquo;m
paying for that RAM, which even in the amazing days of cloud
computing, is still too expensive to waste on a personal budget.&lt;/p&gt;

&lt;p&gt;I decided to replace the Ruby process with a Go process in an attempt
to reduce this wasted, idle RAM. (Sadly I do this kind of thing a
lot).&lt;/p&gt;

&lt;p&gt;To replace the Ruby process, I needed to write some Go code that could
upload files to Amazon S3, and process Sidekiq jobs from a Redis
queue.&lt;/p&gt;

&lt;p&gt;The code that does the upload was really easy to write using the
official &lt;a href=&#34;https://github.com/aws/aws-sdk-go&#34;&gt;AWS Go SDK&lt;/a&gt; library. I
wrote nothing more than a little wrapper really.&lt;/p&gt;

&lt;p&gt;I then added an application that picks up Sidekiq jobs from
Redis. This wasn&amp;rsquo;t too difficult as the
&lt;a href=&#34;https://github.com/cupcake/gokiq&#34;&gt;Gokiq&lt;/a&gt; library does most of the
heavy lifting here. Working out a nice way to unpack the job data into
my Worker struct without modifying the Gokiq library took some
thought, but came out OK.&lt;/p&gt;

&lt;h2 id=&#34;end-result&#34;&gt;End Result&lt;/h2&gt;

&lt;p&gt;The Go process uses 28MB of RAM with 200 workers available. Compared
to the 150-200MB of RAM with 20 workers that I had before, this is a
nice little win.&lt;/p&gt;

&lt;p&gt;Take a look at the
&lt;a href=&#34;https://github.com/scottjbarr/s3uploader&#34;&gt;s3uploader&lt;/a&gt; repository on
Github if is sounds useful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multiple Go Versions</title>
      <link>/2016/02/24/multiple-go-versions/</link>
      <pubDate>Thu, 25 Feb 2016 00:11:26 +1000</pubDate>
      
      <guid>/2016/02/24/multiple-go-versions/</guid>
      <description>&lt;p&gt;Running multiple versions of Go is simple. I see and hear chatter
about it, and there are a few tools around to handle it for you, but
it is so simple to do yourself that I&amp;rsquo;m surprised people reach for a
tool to do this for them.&lt;/p&gt;

&lt;p&gt;Mostly I run the latest stable version of Go, but for whatever reason
(maybe I want to test out a release candidate), I do have multiple
versions installed, and I don&amp;rsquo;t want multiple installations to clobber
each other.&lt;/p&gt;

&lt;p&gt;The following assumes you&amp;rsquo;re on some kind of *nix system, and you&amp;rsquo;re
using Bash. Other OS&amp;rsquo;es and shells will be able to work as well with
appropriate changes.&lt;/p&gt;

&lt;p&gt;I like to keep my Go installations under &lt;code&gt;~/.go/versions&lt;/code&gt;. You can
choose any location you like though.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/.go/versions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s grab the latest version of Go (currently 1.6). I&amp;rsquo;m downloading
the OS X archive here, but if you&amp;rsquo;re running another OS you would
download the appropriate archive. Take a look at the Go
&lt;a href=&#34;https://golang.org/dl/&#34;&gt;Downloads&lt;/a&gt; page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.go/versions
wget https://storage.googleapis.com/golang/go1.6.darwin-amd64.tar.gz
tar -zxf go1.6.darwin-amd64.tar.gz
mv go go1.6
rm go1.6.darwin-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the following environment variables to your &lt;code&gt;~/.bash_profile&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export GOPATH=~/p/go
export GOROOT=~/.go/versions/go1.6
export PATH=$GOROOT/bin:$GOPATH/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is where I set my default version of Go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : &lt;code&gt;GOPATH&lt;/code&gt; is where your Go projects will live, and &lt;code&gt;GOROOT&lt;/code&gt;
is where the Go installation lives. Don&amp;rsquo;t confuse the two.&lt;/p&gt;

&lt;p&gt;Start a new shell and you should have &lt;code&gt;go&lt;/code&gt; on your path.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go version
go version go1.6 darwin/amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success!&lt;/p&gt;

&lt;p&gt;So for whatever reason I also want an older version of Go installed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.go/versions
wget https://storage.googleapis.com/golang/go1.5.3.darwin-amd64.tar.gz
tar -zxf go1.5.3.darwin-amd64.tar.gz
mv go go1.5.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Too easy. You must be getting bored.&lt;/p&gt;

&lt;p&gt;Now I can temporarily switch to the another version by exporting the
desired &lt;code&gt;GOROOT&lt;/code&gt; and prefixing my current &lt;code&gt;$PATH&lt;/code&gt; with &lt;code&gt;$GOROOT/bin&lt;/code&gt;. In this case I am switching to the freshly installed GO 1.5.3.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export GOROOT=~/.go/versions/go1.5.3
$ export PATH=$GOROOT/bin:$PATH
$ go version
go version go1.5.3 darwin/amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/images/great-success.jpg&#34; alt=&#34;Great Success!&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>